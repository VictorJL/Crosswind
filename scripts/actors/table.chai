class table{
    attr mouse

    attr widget

    attr container
    attr selector

    attr actors

    attr rows
    attr columns
    attr data

    attr selected_item

    def table(origin, size){
        eval_file("scripts/actors/input.chai")
        eval_file("scripts/actors/environment.chai")
        this.mouse := mouse()

        this.widget := stage.create_group("table")
        this.actors := Map()
        this.data   := Vector()
        this.rows   := Vector()

        this.widget.set_origin(origin)
        this.widget.set_size(size)

        this.container := control(origin, size, "container", "container.json")
        this.selector := control(origin, vec3(0.0f, 0.0f, 0.0f), "selector", "selector.json")

        this.widget.add_actor("container", this.container.get())
        this.widget.add_actor("selector", this.selector.get())

        this.widget.construct(fun(){}, fun(){}, fun[this](delta){ this.logic(delta) })
        this.selected_item = ""
    }

    def get_selected_item(){
        return this.selected_item
    }

    def select(row){
         var selector_center := this.selector.get().get_origin()
         var selector_size   := this.container.get().get_size()

         this.selector.get().set_origin(vec3(selector_center.x, row.get_origin().y, 0.0f))
         this.selected_item = row.get_text("text").get_text()
    }

    def logic(delta){
        for_each(this.rows, fun[this](i){
            if(this.mouse.is_down(i.second.get())){
                  this.select(i.second.get())
            }
        })
    }

    def clear(){
        this.data.clear()
    }

    def set_data(data){
        this.data.clear()
        this.data := data
    }

    def add_all(columns){
        eval_file("scripts/actors/environment.chai")

        //this.clear()

        var ui_columns := Map()
        var ui_rows    := Map()

        var column_x_offset = 0.0f

        var size := this.container.get().get_size()
        var origin := this.container.get().get_origin()

        for_each(columns, fun[this, size, origin, columns, ui_columns, ui_rows, column_x_offset](i){

            var column_size := vec3(size.x / columns.size() / 2.0f, size.y * 0.05f, 0.0f)

            var l_margin := origin.x - size.x / 2.0f
            var t_margin := origin.y + size.y / 2.0f

            var column_center_x := column_size.x / 2.0f
            var column_center_y := column_size.y /2.0f

            var column_origin := vec3(l_margin + column_center_x + column_x_offset,  t_margin - column_center_y, 0.0f)

            ui_columns[i.get_column_label()] := label(i.get_cell_value(), column_origin, column_size, i.get_column_label())
            ui_columns[i.get_column_label()].get().get_text("text").set_size(column_size)

            column_x_offset += column_size.x * 2.0f

            var index = 0
            var row_y_offset = 0.0f

            for_each(this.data, fun[this, i, index, column_size, column_origin, row_y_offset, ui_rows](j){

                row_y_offset -= column_size.y * 2.0f

                var row_size := vec3(column_size.x, column_size.y, 0.0f)
                var row_origin := vec3(column_origin.x, column_origin.y + row_y_offset, 0.0f)

                var row_name := i.get_cell_value() + "_" + to_string(index)
                var row_field := j.get_fields()[i.get_cell_value()]
                ui_rows[row_name] := label(row_name, row_origin, row_size, row_field)
                ui_rows[row_name].get().get_text("text").set_size(row_size)
                ++index
            })

        })

        for_each(ui_columns, fun[this](i){
            this.actors[i.first] := i.second
            this.widget.add_actor(i.first, i.second.get())
        })

        var i_key
        var i_count = 0
        for_each(ui_rows, fun[this, i_key, i_count](i){

            this.actors[i.first] := i.second
            this.widget.add_actor(i.first, i.second.get())

            if(i_count == 0){
                i_key = i.first
                ++i_count
            }

            //this.rows.push_back(i.second.get()) // fails
            this.rows.push_back(i)
        })



        var selector_center := this.selector.get().get_origin()
        var selector_size   := this.container.get().get_size()


        this.selector.get().set_origin(vec3(selector_center.x, ui_rows[i_key].get().get_origin().y, 0.0f))
        this.selector.get().get_model("selector").set_size(vec3(selector_size.x, ui_rows[i_key].get().get_text("text").get_size().y, 0.0f))

        this.select(ui_rows[i_key].get())

    }

    def get(){
        return this.widget
    }

}
