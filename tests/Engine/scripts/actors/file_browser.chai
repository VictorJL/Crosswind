class file_browser{
    attr elements
    attr widget

    def file_browser(origin, on_file_choosen){
        this.widget := stage.create_group()
        this.elements := Map()
        var window_size := core.video.window.get_size()
        var size := vec3(window_size.x/3.0f, window_size.y/3.0f, 0.0f)
        this.widget.construct(fun[this, origin, size, on_file_choosen](){this.init(origin, size, on_file_choosen)},
        fun(){}, fun(delta){})
    }

    def init(origin, size, on_file_choosen){
        this.widget.set_origin(origin)
        this.widget.set_size(size)

        this.elements["panel"] := eval_file("scripts/actors/panel.chai")(origin, size)

        var v_border_size := vec3(size.x, size.y/20.0f, 0.0f)
        var h_border_size := vec3(size.x/20.0f, size.y, 0.0f)

        this.elements["l_border"] := eval_file("scripts/actors/panel.chai")(origin, size)
        this.elements["l_border"] := eval_file("scripts/actors/panel.chai")(origin, size)
        this.elements["l_border"] := eval_file("scripts/actors/panel.chai")(origin, size)
        this.elements["l_border"] := eval_file("scripts/actors/panel.chai")(origin, size)


        for_each(this.elements, fun[this](i) { this.widget.add_actor(i.first, i.second.get()) })

    }

    def get(){
        return this.widget
    }
};

return fun(origin, size, on_file_choosen){
    return file_browser(origin, size, on_file_choosen)
}