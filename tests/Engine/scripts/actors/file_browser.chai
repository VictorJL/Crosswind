class file_browser{
    attr actors
    attr groups

    attr widget

    def file_browser(origin, on_file_choosen){
        this.widget := stage.create_group()
        this.actors := Map()
        this.groups := Map()

        var window_size := core.video.window.get_size()
        var size := vec3(window_size.x/3.0f, window_size.y/3.0f, 0.0f)
        this.widget.construct(fun[this, origin, size, on_file_choosen](){this.init(origin, size, on_file_choosen)},
        fun(){}, fun(delta){})
    }

    def init(origin, size, on_file_choosen){
        this.widget.set_origin(origin)
        this.widget.set_size(size)

        var create_panel     = eval_file("scripts/actors/panel.chai")
        var create_border    = eval_file("scripts/actors/border.chai")
        var create_container = eval_file("scripts/actors/container.chai")
        var create_button    = eval_file("scripts/actors/button.chai")

        var v_border_size   := vec3(size.x, size.y/20.0f, 0.0f)
        var h_border_size   := vec3(size.x/20.0f, size.y + v_border_size.y * 2.0f, 0.0f)
        var container_size  := vec3(size.x / 3.0f, size.y / 3.0f, 0.0f)
        var cmd_button_size := vec3(100.0f, 50.0f, 0.0f)

        var r_border_origin := vec3(origin.x + size.x / 2.0f + h_border_size.x / 2.0f, origin.y, 0.0f)
        var l_border_origin := vec3(origin.x - size.x / 2.0f - h_border_size.x / 2.0f, origin.y, 0.0f)
        var t_border_origin := vec3(origin.x, origin.y + size.y / 2.0f + v_border_size.y / 2.0f, 0.0f)
        var b_border_origin := vec3(origin.x, origin.y - size.y / 2.0f - v_border_size.y / 2.0f, 0.0f)

        var l_button_origin := vec3(origin.x + size.x / 2.0f - cmd_button_size.x, origin.y - size.y / 2.0f + cmd_button_size.y, 0.0f)

        this.actors["panel"] := create_panel(origin, size)
        this.groups["container"] := create_container(origin, container_size)

        this.actors["r_border"] := create_border(r_border_origin, h_border_size)
        this.actors["l_border"] := create_border(l_border_origin, h_border_size)
        this.actors["t_border"] := create_border(t_border_origin, v_border_size)
        this.actors["b_border"] := create_border(b_border_origin, v_border_size)

        this.groups["l_button"] := create_button(l_button_origin, cmd_button_size, "load", on_file_choosen)

        for_each(this.groups, fun[this](i) { this.widget.add_group(i.first, i.second.get()) })
        for_each(this.actors, fun[this](i) { this.widget.add_actor(i.first, i.second.get()) })
    }

    def get(){
        return this.widget
    }
};

return fun(origin, on_file_choosen){
    return file_browser(origin, on_file_choosen)
}