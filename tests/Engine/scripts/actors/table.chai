class table{
    attr widget
    attr actors
    attr data

    def table(origin, size){
        this.widget := stage.create_group("table")
        this.actors := Map()
        this.data   := Vector()

        this.widget.set_origin(origin)
        this.widget.set_size(size)

        //var create_control = eval_file("scripts/actors/control.chai")

        this.actors["container"] := create_control(origin, size, "container", "container.json")
        for_each(this.actors, fun[this](i) { this.widget.add_actor(i.first, i.second.get()) })
    }

    def clear(){

    }

    def set_data(data){
        this.data.clear()
        this.data := data
    }

    def add_all(columns){

        var ui_columns := Map()

        for_each(columns, fun[this, ui_columns](i){

            var size := this.actors["container"].get().get_size()
            var origin := this.actors["container"].get().get_origin()

            var column_size := vec3(size.x / this.actors.size() / 4.0f, size.y * 0.05f, 0.0f)
            var column_origin := vec3(origin.x - size.x / 2.0f + column_size.x / 2.0f, origin.y + size.y / 2.0f - column_size.y /2.0f, 0.0f)
            ui_columns[i.get_column_label()] := create_label(i.get_column_label(), column_origin, i.get_column_label())
            ui_columns[i.get_column_label()].get().get_text("text").set_size(column_size)

            for_each(this.data, fun[this, i](j){
                print(i.get_cell_value())
                print(j.get_fields()[i.get_cell_value()])
            })

        })

        for_each(ui_columns, fun[this](i){
            this.actors[i.first] := i.second
            this.widget.add_actor(i.first, i.second.get())
        })


    }

    def get(){
        return this.widget
    }

}



return fun(origin, size){
    return table(origin, size)
}