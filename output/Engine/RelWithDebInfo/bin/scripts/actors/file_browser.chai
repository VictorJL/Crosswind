class file_data{
    attr fields

    def file_data(file_name, file_type){
        this.fields := Map()
        this.fields["file_name"] := file_name
        this.fields["file_type"] := file_type
    }

    def get_fields(){
        return this.fields
    }
}

class file_browser{
    attr actors
    attr groups

    attr widget

    def file_browser(origin, on_file_choosen){
        this.widget := stage.create_group("file_browser")
        this.actors := Map()
        this.groups := Map()

        var window_size := core.video.window.get_size()
        var size := vec3(window_size.x/3.0f, window_size.y/3.0f, 0.0f)
        this.widget.construct(fun[this, origin, size, on_file_choosen](){this.init(origin, size, on_file_choosen)},
        fun(){}, fun(delta){
        })
    }

    def get(){
        return this.widget
    }

    def init(origin, size, on_file_choosen){
        this.widget.set_origin(origin)
        this.widget.set_size(size)

        eval_file("scripts/actors/environment.chai")

        var t_border_size   := vec3(size.x, size.y/20.0f * 1.5f, 0.0f)
        var b_border_size   := vec3(size.x, size.y/20.0f, 0.0f)

        var h_border_size   := vec3(size.x/20.0f, size.y + t_border_size.y + b_border_size.y, 0.0f)
        var button_size := vec3(size.x * 0.20f, size.y * 0.10f, 0.0f)

        var panel_center := origin.y + t_border_size.y / 2.0f - b_border_size.y / 2.0f
        var r_border_origin := vec3(origin.x + size.x / 2.0f + h_border_size.x / 2.0f, panel_center, 0.0f)
        var l_border_origin := vec3(origin.x - size.x / 2.0f - h_border_size.x / 2.0f, panel_center, 0.0f)
        var t_border_origin := vec3(origin.x, origin.y + size.y / 2.0f + t_border_size.y / 2.0f, 0.0f)
        var b_border_origin := vec3(origin.x, origin.y - size.y / 2.0f - b_border_size.y / 2.0f, 0.0f)

        var button_origin := vec3(origin.x + size.x * 0.45f - button_size.x / 2.0f, origin.y - size.y / 2.0f + button_size.y / 2.0f, 0.0f)
        this.actors["panel"] := panel(origin, size)

        this.actors["r_border"] := border(r_border_origin, h_border_size)
        this.actors["l_border"] := border(l_border_origin, h_border_size)
        this.actors["t_border"] := border(t_border_origin, t_border_size)
        this.actors["b_border"] := border(b_border_origin, b_border_size)

        this.groups["l_button"] := button("load_button", button_origin, button_size, "load", on_file_choosen)


        var table_size  := vec3(size.x * 0.90f, size.y * 0.80f, 0.0f)
        var table_origin    := vec3(origin.x, origin.y + button_size.y / 2.0f, 0.0f)
        this.groups["table"] := table(table_origin, table_size)


        var columns := Vector()

        columns.push_back(column("File", "file_name"))
        columns.push_back(column("Type", "file_type"))

        var data := Vector()

        data.push_back(file_data("sample.png", "png"))
        data.push_back(file_data("sample2.png", "png"))
        data.push_back(file_data("sample3.png", "png"))

        this.groups["table"].set_data(data)
        this.groups["table"].add_all(columns)

        for_each(this.groups, fun[this](i) { this.widget.add_group(i.first, i.second.get()) })
        for_each(this.actors, fun[this](i) { this.widget.add_actor(i.first, i.second.get()) })


    }

    def update(delta){

    }

};
